// transition mixin


/* @include transition(all,2s,ease-out); */
@mixin transition($what: all, $time: 0.2s, $how: ease-in-out) {
    -webkit-transition: $what $time $how;
    -moz-transition: $what $time $how;
    -ms-transition: $what $time $how;
    -o-transition: $what $time $how;
    transition: $what $time $how;
}

// a.button {
//     /* button styles */
//     @include transition (all, 0.5s, ease)
// }

// transform mixin
@mixin transform($deg) {
    -webkit-transform: scale($deg, $deg);
    -ms-transform: scale($deg, $deg);
    transform: scale($deg, $deg);
}

// flexbox
@mixin flex() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

// flex wrap
@mixin flex-wrap($value) {
    -webkit-flex-wrap: $value;
    -ms-flex-wrap: $value;
    flex-wrap: $value;
}

// width fit
@mixin width-fit() {
    width: intrinsic;
    /* Safari/WebKit uses a non-standard name */
    width: -moz-max-content;
    /* Firefox/Gecko */
    width: -webkit-max-content;
    /* Chrome */
}

// icon styles
@mixin icon($icon, $width: null, $height: null) {
    background-image: $icon;
    background-position: center;
    background-repeat: no-repeat;
    cursor: pointer;
    height: $width;
    width: $height;
}

// badge styles
@mixin badge() {
    background-color: $theme-light-blue;
    border-radius: 100%;
    color: $white;
    font-size: 0.6rem;
    font-weight: 600;
    height: 15px;
    line-height: 14px;
    position: absolute;
    right: -10px;
    text-align: center;
    top: -7px;
    width: 16px;
}

// text ellipsis ...
@mixin text-ellipsis($numLines: 1, $lineHeight: 1.412) {
    overflow: hidden;
    text-overflow: -o-ellipsis-lastline;
    text-overflow: ellipsis;
    display: block;
    /* autoprefixer: off */
    display: -webkit-box;
    -webkit-line-clamp: $numLines;
    -webkit-box-orient: vertical;
    max-height: $numLines * $lineHeight + unquote('em');
}

// dark overflow
@mixin dark-overflow {
    background-color: $dark-overflow-bg;
    cursor: pointer;
    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 999;
}

@mixin placeholder {
    ::-webkit-input-placeholder {
        @content;
    }

    ::-moz-placeholder {
        @content;
    }

    :-moz-placeholder {
        @content;
    }

    :-ms-input-placeholder {
        @content;
    }
}



@mixin screen($size, $type: max, $pixels: $breakpoint-small) {
    @if $size=='small' {
        @media screen and (width: $breakpoint-small) {
            @content;
        }
    }

    @else if $size=='med-small' {
        @media screen and (width: $breakpoint-med-small) {
            @content;
        }
    }

    @else if $size=='med' {
        @media screen and (width: $breakpoint-med) {
            @content;
        }
    }

    @else if $size=='large' {
        @media screen and (width: $breakpoint-med) {
            @content;
        }
    }

    @else if $size=='custom' {
        @media screen and (width: $pixels) {
            @content;
        }
    }

    @else {
        @content;
    }
}

.foo {
    @include screen(large) {
        width: 20%;
    }

    @include screen(med) {
        width: 40%;
    }

    @include screen(med-small) {
        width: 60%;
    }

    @include screen(small) {
        width: 80%;
    }

    @include screen(custom, max, 400) {
        width: 100%;
    }
}


@mixin respond-to($breakpoint) {

    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {

        // Prints a media query based on the value
        @media #{inspect(map-get($breakpoints, $breakpoint))} {
            @content;
        }
    }

    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        +"Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}


//use responsive
// .selector {
//     color: red;

//     @include respond-to('small') {
//         color: blue;
//     }
// }

@mixin breakpoint($point) {
    @if $point==desktop {
        @media (min-width: 70em) {
            @content ;
        }
    }

    @else if $point==laptop {
        @media (min-width: 64em) {
            @content ;
        }
    }

    @else if $point==tablet {
        @media (min-width: 50em) {
            @content ;
        }
    }

    @else if $point==phablet {
        @media (min-width: 37.5em) {
            @content ;
        }
    }

    @else if $point==mobileonly {
        @media (max-width: 37.5em) {
            @content ;
        }

    }
}

// .podcasts {
//     margin: 1em auto;

//     @include breakpoint(phablet) {
//         width: 100%;
//     }

//     @include breakpoint(desktop) {
//         // maybe some desktop layout styles.
//     }
// }

@mixin heading {
    @include title-face;
    margin-bottom: 0.35em;
    line-height: 1.2;
    color: inherit;

    a {
        @include heading-link;
    }
}

@mixin heading-1 {
    @include heading;
    font-size: 3.375em;
}

@mixin heading-2 {
    @include heading;
    font-size: 2.966em;
}

@mixin heading-3 {
    @include heading;
    font-size: 1.5em;
}

@mixin heading-4 {
    @include heading;
    font-size: 1.318em;
}

@mixin heading-5 {
    @include heading;
    font-size: 1em;
}

@mixin heading-6 {
    @include heading;
    font-size: 0.875em;
}

// h1 {
//     @include heading-1;
// }

// h2 {
//     @include heading-2;
// }

// h3 {
//     @include heading-3;
// }

// h4 {
//     @include heading-4;
// }

@mixin font-source-sans($size: false, $colour: false, $weight: false, $lh: false) {
    font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;

    @if $size {
        font-size: $size;
    }

    @if $colour {
        color: $colour;
    }

    @if $weight {
        font-weight: $weight;
    }

    @if $lh {
        line-height: $lh;
    }
}

@mixin input-placeholder {
    &.placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
    }

    &::-moz-placeholder {
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }

    &::-webkit-input-placeholder {
        @content;
    }
}

@mixin center($position) {
    position: absolute;

    @if $position=='vertical' {
        top: 50%;
        -webkit-transform: translateY(-50%);
        -ms-transform: translateY(-50%);
        transform: translateY(-50%);
    }

    @else if $position=='horizontal' {
        left: 50%;
        -webkit-transform: translateX(-50%);
        -ms-transform: translateX(-50%);
        transform: translate(-50%);
    }

    @else if $position=='both' {
        top: 50%;
        left: 50%;
        -webkit-transform: translate(-50%, -50%);
        -ms-transform: translate(-50%, -50%);
        transform: translate(-50%, -50%);
    }
}

.foo {
    @include center(both);
}

%clearfix {
    *zoom: 1;

    &:before,
    &:after {
        content: " ";
        display: table;
    }

    &:after {
        clear: both;
    }
}

.container-with-floated-children {
    @extend %clearfix;
}

@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }

    @-moz-keyframes #{$animation-name} {
        @content;
    }

    @-ms-keyframes #{$animation-name} {
        @content;
    }

    @-o-keyframes #{$animation-name} {
        @content;
    }

    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
    -webkit-animation: #{$str};
    -moz-animation: #{$str};
    -ms-animation: #{$str};
    -o-animation: #{$str};
    animation: #{$str};
}

@include keyframes(fade-out) {
    0% {
        opacity: 1;
    }

    90% {
        opacity: 0;
    }
}

// Add animation to element
.element {
    width: 100px;
    height: 100px;
    background: black;
    @include animation('fade-out 5s 3');
}

@mixin image-2x($image, $width, $height) {

    @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
        background-image: url($image);
        background-size: $width $height;
    }
}

div.logo {
    background: url("logo.png") no-repeat;
    @include image-2x("logo2x.png", 100px, 25px);
}

@mixin background-gradient($start-color, $end-color, $orientation) {
    background: $start-color;

    @if $orientation=='vertical' {
        background: -webkit-linear-gradient(top, $start-color, $end-color);
        background: linear-gradient(to bottom, $start-color, $end-color);
    }

    @else if $orientation=='horizontal' {
        background: -webkit-linear-gradient(left, $start-color, $end-color);
        background: linear-gradient(to right, $start-color, $end-color);
    }

    @else {
        background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
        background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
}

.foo {
    @include background-gradient(red, black, 'vertical');
}

@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
    @font-face {
        font-family: quote($font-name);
        src: url($file-name + '.eot');
        src: url($file-name + '.eot?#iefix') format('embedded-opentype'),
        url($file-name + '.woff') format('woff'),
        url($file-name + '.ttf') format('truetype'),
        url($file-name + '.svg##{$font-name}') format('svg');
        font-weight: $weight;
        font-style: $style;
    }
}

//Padding mixin
@mixin padding($top, $right, $bottom, $left) {
    padding-top: $top;
    padding-right: $right;
    padding-bottom: $bottom;
    padding-left: $left;
}

//Margin mixin
@mixin margin($top, $right, $bottom, $left) {
    margin-top: $top;
    margin-right: $right;
    margin-bottom: $bottom;
    margin-left: $left;
}

@include padding(top, right, bottom, left);
@include margin(top, right, bottom, left);

// Usage 1
@include padding(1px, 2px, 3px, 4px, );
@include margin(1px, 2px, 3px, 4px);

@mixin grid($flex) {
    @if $flex {
        @include flex;
    }

    @else {
        display: block;
    }
}

@include grid(true);

@mixin padding($values) {
    @each $var in $values {
        padding: #{$var};
    }
}
@mixin padding($values...) {    
    @each $var in $values {
        padding: #{$var};
    }
}

$style2: (background: #bada55, width: 100%, height: 100px);
@mixin box($width, $height, $background) {
    width: $width;
    height: $height;
    background-color: $background;
}

.fogdog {
    @include box($style1...);
}

.badass {
    @include box($style2...);
}